const { resolve, join } = require('path');

const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const WorkboxPlugin = require('workbox-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const LodashModuleReplacementPlugin = require('lodash-webpack-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');

export default settings = {

  resolve: {
    extensions: ['*', '.js', '.jsx', '.css', '.scss'],
  },
  context: resolve(__dirname, '.'),
  entry: {
    app: [
      './src/index'
    ],
    vendor: [],
  },
  output: {
    filename: '[name].[hash].js',
    path: resolve(__dirname, '..', 'dist'),
  },
  module: {
    rules = [{
			test: /.jsx?$/,
			loader: 'babel-loader',
			exclude: /node_modules/,
		}, {
			test: /\.scss$/,
			exclude: /node_modules/,
			use: ExtractTextPlugin.extract({
				fallback: 'style-loader',
				use: [{
					loader: 'css-loader',
					options: {
						sourceMap: true,
						importLoaders: 2,
						modules: true,
						localIdentName: '[name]__[local]___[hash:base64:5]'
					},
				}, {
					loader: 'postcss-loader',
				}, {
					loader: 'sass-loader',
					options: {
						sourceMap: true,
					},
				}],
			}),
		}, {
			test: /\.css$/,
			use: [{
				loader: 'style-loader',
			}, {
				loader: 'css-loader',
				options: {
					sourceMap: true,
					importLoaders: 2,
					modules: true,
					localIdentName: '[name]__[local]___[hash:base64:5]'
				},
			}, {
				loader: 'postcss-loader',
			}],
		}, {
			test: /\.(woff2|woff|ttf|eot|svg)(\?.*$|$)/,
			loader: 'file-loader?name=fonts/[name].[ext]',
			include: [
				join(__dirname, 'src'),
				join(__dirname, 'node_modules'),
			],
		}, {
			test: /\.(jpg|jpeg|gif|png|ico)(\?.*$|$)$/,
			loader: 'file-loader?name=img/[name].[ext]',
			include: [
				join(__dirname, 'src'),
				join(__dirname, 'node_modules'),
			],
		}],
  },
  plugins,
  devServer: {
		quiet: false,
		port: 3000,
		contentBase: join(__dirname, 'dist'),
		hot: true,
		historyApiFallback: true,
		inline: true,
		noInfo: false,
		headers: { 'Access-Control-Allow-Origin': '*' },
		stats: {
			assets: false,
			colors: true,
			version: false,
			hash: false,
			timings: false,
			chunks: false,
			chunkModules: false,
		},

	}
};

